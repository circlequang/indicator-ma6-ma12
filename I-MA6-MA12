//+------------------------------------------------------------------+
//|                                                   I-MA6-MA12.mq5 |
//|                                                     Circle Quang |
//+------------------------------------------------------------------+
#property copyright "Circle Quang"
#property link      "https://www.dudoangia.com"
#property version   "1.00"

#property indicator_chart_window
#property indicator_buffers 3
#property indicator_plots   3

//MA6
#property indicator_label1  "MA6"
#property indicator_type1   DRAW_LINE
#property indicator_color1  clrBlue
#property indicator_style1  STYLE_SOLID
#property indicator_width1  2
//MA12
#property indicator_label2  "MA12"
#property indicator_type2   DRAW_LINE
#property indicator_color2  clrRed
#property indicator_style2  STYLE_SOLID
#property indicator_width2  2
//Cross
#property indicator_label3  "Cross"
#property indicator_type3   DRAW_ARROW
#property indicator_color3  clrLime
#property indicator_style3  STYLE_SOLID
#property indicator_width3  2

//--- indicator buffers
double MA6Buffer[];
double MA12Buffer[];
double CrossBuffer[];

//--- input parameters
// can change other 
input int MA6_Period = 6;
input int MA12_Period = 12;


int handle_MA6;
int handle_MA12;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Indicator buffer mapping
   SetIndexBuffer(0, MA6Buffer);
   SetIndexBuffer(1, MA12Buffer);
   SetIndexBuffer(2, CrossBuffer);

  
   IndicatorSetString(INDICATOR_SHORTNAME, "MA Cross (" + IntegerToString(MA6_Period) + "," + IntegerToString(MA12_Period) + ")");
   
   
   PlotIndexSetInteger(2, PLOT_ARROW, 159);

  
   handle_MA6 = iMA(NULL, 0, MA6_Period, 0, MODE_SMA, PRICE_CLOSE);
   handle_MA12 = iMA(NULL, 0, MA12_Period, 0, MODE_SMA, PRICE_CLOSE);

   if (handle_MA6 == INVALID_HANDLE || handle_MA12 == INVALID_HANDLE)
   {
      Print("Error creating iMA handles");
      return(INIT_FAILED);
   }

   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
   
   if (BarsCalculated(handle_MA6) < rates_total || BarsCalculated(handle_MA12) < rates_total)
   {
      Print("Not enough bars calculated");
      return(0);
   }

   CopyBuffer(handle_MA6, 0, 0, rates_total, MA6Buffer);
   CopyBuffer(handle_MA12, 0, 0, rates_total, MA12Buffer);

  
   for(int i = prev_calculated > 0 ? prev_calculated - 1 : 1; i < rates_total; i++)
     {
      CrossBuffer[i] = 0; // Reset cross buffer

      if((MA6Buffer[i-1] < MA12Buffer[i-1] && MA6Buffer[i] > MA12Buffer[i]) ||
         (MA6Buffer[i-1] > MA12Buffer[i-1] && MA6Buffer[i] < MA12Buffer[i]))
        {
         CrossBuffer[i] = MA6Buffer[i];
        }
     }

   return(rates_total);
  }
//+------------------------------------------------------------------+
